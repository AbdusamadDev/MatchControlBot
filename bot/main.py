# coding=utf-8
import asyncio
import os
from datetime import datetime

from aiogram.dispatcher import filters
from dotenv import load_dotenv
import pytz
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from sheet_delete import unix, delete_expired, delete, subtract_from_current_date
import buttons
import states
import database
from sheet_read import get_data_from_id, normalize_data, read_sheet_values
from sheet_write import write_registration
from sheet_update import update_registration

load_dotenv()

mess = """
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

<b><b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
–ú–∞—Ç—á–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø–æ —Å–º–µ—à–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ñ—É—Ç–±–æ–ª–∞ –∏ –º–∏–Ω–∏-—Ñ—É—Ç–±–æ–ª–∞, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é:</b></b>



‚ÑπÔ∏è <b>1. –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤</b>


    ‚Ä¢ –í —Å–ª—É—á–∞–µ —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞, –µ–≥–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫;
    
    ‚Ä¢ –í —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–æ–ª–µ –≤—ã—Ö–æ–¥—è—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ñ–æ—Ä–º–∞—Ç—É 5—Ö5, 6—Ö6, 7—Ö7 –∏–ª–∏ 8—Ö8


    –ú–∏–Ω–∏–º—É–º -1 —á–µ–ª–æ–≤–µ–∫ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –ø–æ–ª–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã 
    4 –ø—Ä–∏ 5—Ö5, 5 –ø—Ä–∏ 6—Ö6 –∏ —Ç.–¥.


    ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ. –†–∞–∑—Ä–µ—à–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω—ã–µ –∑–∞–º–µ–Ω—ã;

    ‚Ä¢ –í—Ä–∞—Ç–∞—Ä—å –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏ —Å –ª—é–±—ã–º –∏–≥—Ä–æ–∫–æ–º —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.

‚ÑπÔ∏è <b>2. –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤</b>

    ‚Ä¢ –ò–≥—Ä–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏–ª–∏ –Ω–æ—Å–∏—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ –∏–ª–∏ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–≤–∫–ª—é—á–∞—è —é–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –ª—é–±–æ–≥–æ –≤–∏–¥–∞);

    ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π –∏–≥—Ä–æ–∫–∞ —è–≤–ª—è—é—Ç—Å—è: –º–∞–Ω–∏—à–∫–∞, —Ñ—É—Ç–±–æ–ª–∫–∞ —Å —Ä—É–∫–∞–≤–∞–º–∏, —Ç—Ä—É—Å—ã, –≥–µ—Ç—Ä—ã, –æ–±—É–≤—å (—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–±—É–≤—å —Å –≥–ª–∞–¥–∫–æ–π –ø–æ–¥–æ—à–≤–æ–π, –ª–∏–±–æ –±—É—Ç—Å—ã-—Å–æ—Ä–æ–∫–æ–Ω–∂–∫–∏);

    ‚Ä¢ –ë—É—Ç—Å—ã —Å —à–∏–ø–∞–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.


‚ÑπÔ∏è <b>3. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</b>


    –ò–≥—Ä—ã –Ω–∞ –≤—ã–ª–µ—Ç:
	 <b>–ø–æ 6 –∏–ª–∏ 7 –º–∏–Ω —Ç–∞–π–º</b>
    –ò–≥—Ä—ã 1 –Ω–∞ 1: 
	<b>2 —Ç–∞–π–º–∞ –ø–æ 26 –º–∏–Ω—É—Ç</b>


    ‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É —Ç–∞–π–º–∞–º–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –º–∏–Ω—É—Ç

    ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –ø–æ–ª—è


‚ÑπÔ∏è <b>4. –†–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤</b>

–†–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–ª–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –∫–æ–º–∞–Ω–¥.


    ‚Ä¢ –í —Å–ª—É—á–∞–µ –ø–µ–Ω–∞–ª—å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞, —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–∏–¥–µ–æ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –Ω–∞ –ø–æ–ª–µ, –æ—Å—Ç–∞—ë—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–º)

    ‚Ä¢ –¢–µ—Ö –ø–æ—Ä –∏–¥—ë—Ç —Å–æ —Å—á—ë—Ç–æ–º 3:0.


‚ÑπÔ∏è <b>5. –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –Ω–∞ –ø–æ–ª–µ</b>
–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ


    ‚Ä¢ –ì–æ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Å—á–∏—Ç–∞–Ω –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–¥–∞—Ä–∞;

    ‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏–µ ¬´–≤–Ω–µ –∏–≥—Ä—ã¬ª –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è;

    ‚Ä¢ –ü–µ–Ω–∞–ª—å—Ç–∏ –±—å–µ—Ç—Å—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ 9 –º–µ—Ç—Ä–æ–≤ (–≤–æ—Ä–æ—Ç–∞ 5—Ö2), 7 –º–µ—Ç—Ä–æ–≤ –≤–æ—Ä–æ—Ç–∞ (3—Ö2);

    ‚Ä¢ –£—Ö–æ–¥ –º—è—á–∞ –∑–∞ –ø–æ–ª–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Å–µ–≥–æ –º—è—á–∞ –ª–∏–Ω–∏–∏. –ü–æ–∫–∞ –µ–≥–æ –¥–∞–∂–µ –º–∞–ª–∞—è —á–∞—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –ª–∏–Ω–∏–∏ - –æ–Ω –≤ –ø–æ–ª–µ;

    ‚Ä¢ –í—Ä–∞—Ç–∞—Ä—å –≤–≤–æ–¥–∏—Ç –º—è—á –≤ –∏–≥—Ä—É —É–¥–∞—Ä–æ–º –ø–æ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ–º—É –º—è—á—É —Å –ø–æ–ª—è –∏–∑ –ø—Ä–µ–¥–µ–ª–æ–≤ —à—Ç—Ä–∞—Ñ–Ω–æ–π –ø–ª–æ—â–∞–¥–∏. –ù–∞ –≤–≤–æ–¥ –º—è—á–∞ –≤—Ä–∞—Ç–∞—Ä—é –¥–∞–µ—Ç—Å—è 6 —Å–µ–∫—É–Ω–¥;

    ‚Ä¢ –í—Ä–∞—Ç–∞—Ä—å –Ω–µ –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å –≤ —Ä—É–∫–∏ –ø–∞—Å –æ—Ç —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è —Ä–∏–∫–æ—à–µ—Ç. –ï—Å–ª–∏ –≤—Å—ë –∂–µ —Ç–∞–∫ —Å–ª—É—á–∏–ª–æ—Å—å, —Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π —É–¥–∞—Ä —Å –ª–∏–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–π;

    ‚Ä¢ –ê—É—Ç –≤–≤–æ–¥–∏—Ç—Å—è —É–¥–∞—Ä–æ–º –Ω–æ–≥–∏ –ø–æ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ–º—É –º—è—á—É —Å –±–æ–∫–æ–≤–æ–π –ª–∏–Ω–∏–∏. –ï—Å–ª–∏ –º—è—á –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–∑ –∞—É—Ç–∞ –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞, –Ω–µ –∫–æ—Å–Ω—É–≤—à–∏—Å—å –Ω–∏–∫–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤, —Ç–æ –≥–æ–ª –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è;

    ‚Ä¢ –ù–∞ –≤–≤–æ–¥ –º—è—á –∏–∑ –∞—É—Ç–∞, —Å–æ —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ/—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–ª–∏ —É–≥–ª–æ–≤–æ–≥–æ —É–¥–∞—Ä–∞ –∫–æ–º–∞–Ω–¥–µ –¥–∞–µ—Ç—Å—è 6 —Å–µ–∫—É–Ω–¥. –ü—Ä–∏ —ç—Ç–æ–º –∏–≥—Ä–æ–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–µ –±–ª–∏–∂–µ 5 –º–µ—Ç—Ä–æ–≤ –æ—Ç –º—è—á–∞;

    ‚Ä¢ –ò–≥—Ä–æ–∫–∞–º –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–æ–≤ –≤ –ø–æ–ø—ã—Ç–∫–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –º—è—á, –∫–æ–≥–¥–∞ –∏–º –∏–≥—Ä–∞–µ—Ç –∏–ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å—ã–≥—Ä–∞—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫. –ó–∞ –ø–æ–¥–∫–∞—Ç –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —É–¥–∞—Ä;

    ‚Ä¢ –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –¥–µ–π—Å—Ç–≤–∏—è–º –≤—Ä–∞—Ç–∞—Ä—è (–±–µ–∑ –º—è—á–∞);

    ‚Ä¢ –ù–µ–ª—å–∑—è –≤—Å—Ç—É–ø–∞—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –±–æ—Ä—å–±—É —Å –≤—Ä–∞—Ç–∞—Ä—ë–º (–±–µ–∑ –º—è—á–∞);

    ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º—è—á –∏ –∏–≥—Ä–∞—Ç—å –ª—ë–∂–∞;

    ‚Ä¢ –ó–∞–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –ª–∏–Ω–∏—é, –≤–¥–æ–ª—å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ—è—Ç –≤–æ—Ä–æ—Ç–∞.


‚ÑπÔ∏è <b>6. –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏</b>

    ‚Ä¢ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–π —Å –≤—ã–∫—Ä–∏–∫–∞–º–∏ —Å —É–≥—Ä–æ–∑–æ–π —Ä–∞—Å–ø—Ä–∞–≤—ã, –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Ç–µ–ª–µ—Å–Ω—ã—Ö —Ç—Ä–∞–≤–º –∏–ª–∏ –∏–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è —É–≥—Ä–æ–∑–æ–π –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—é –∏–≥—Ä–æ–∫–∞, –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä—è–º–∞—è –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç 2 –¥–æ 10 –º–∞—Ç—á–µ–π. –ë–µ–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤;

    ‚Ä¢ –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–±–æ–µ–≤ –∏–ª–∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ —Ç–µ–ª–µ—Å–Ω—ã—Ö —Ç—Ä–∞–≤–º, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —è–≤–Ω–æ–π –≥—Ä—É–±–æ—Å—Ç–∏, –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –∏–ª–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ –º–∞—Ç—á–∞. –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é, –∞ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Ç—á–µ, –≤ –¥–µ–Ω—å –∫–æ—Ç–æ—Ä–æ–≥–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –í –ø–ª–æ—Ç—å –¥–æ —Å–Ω—è—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞, –≤ —Å–ª—É—á–∞–µ –º–∞—Å—Å–æ–≤–æ–π –¥—Ä–∞–∫–∏ –∏ —É–≥—Ä–æ–∑. –ë–µ–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.

<i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—â–∏–º –ø–æ–¥ –ø—Ä–∞–≤–∏–ª–∞ —Ñ—É—Ç–±–æ–ª–∞ –∏ –º–∏–Ω–∏-—Ñ—É—Ç–±–æ–ª–∞.</i>

üë§ Artiom Kiseliov
üìÖ 31 –º–∞—Ä—Ç–∞, 19:32"""

# üö´ ‚úÖ ‚ÑπÔ∏è ‚ùì
token = os.getenv("TOKEN")
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
print("Bot started successfully")


@dp.message_handler(commands=["test"])
async def button_url(message: types.Message):
    await message.answer("somethin", reply_markup=buttons.btn)


def is_correct_text(text):
    return text not in ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É", "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞"]


def is_registered(user: dict, tg_id: int):
    return any(str(u_id.get("id")) == str(tg_id) for u_id in user)


# ------------------------------------------------------------------------------------------------ Oplatit igru button
@dp.callback_query_handler(lambda c: c.data.startswith('pay_game'))
async def pay_game(callback_query: types.CallbackQuery, state: FSMContext):
    match_id = (await state.get_data()).get("match_id")
    await callback_query.message.delete()
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    date_keys = ["match_id", "data", "address", "date", "time", "max"]
    dates = get_data_from_id(
        table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G",
        id=str(match_id),
        keys=date_keys,
        key="match_id"
    )[0]
    matches = get_data_from_id(
        id=str(match_id),
        table_name="–ú–∞—Ç—á–∏!A:G",
        keys=match_keys,
        key="match_id"
    )
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    if int(dates.get("max")) > len(matches):
        team_user = get_data_from_id(
            id=str(callback_query.from_user.id),
            table_name="–ú–∞—Ç—á–∏!A:I",
            keys=match_keys,
            key="user_id"
        )

        def is_payed():
            return any(str(k.get("match_id")) == str(match_id) and k.get("pay") == "+" for k in team_user)

        if not is_payed():
            await bot.send_message(
                callback_query.from_user.id,
                text="–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã",
                reply_markup=buttons.per_or_three_button
            )
        else:
            await bot.send_message(callback_query.from_user.id, "üö´ –≤—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
    else:
        await bot.send_message(
            callback_query.from_user.id,
            text="üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç—É –∏–≥—Ä—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!"
        )


@dp.callback_query_handler(lambda c: c.data.startswith('only_me'))
async def only_me(callback: types.CallbackQuery):
    await bot.send_message(
        callback.from_user.id,
        "‚ÑπÔ∏è –¢—ã –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç `—Ç–æ–ª—å–∫–æ –º–µ–Ω—è`. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:"
    )
    await states.PaymentDetails.card_id.set()


@dp.message_handler(state=states.PaymentDetails.card_id)
async def get_card_id(message: types.Message, state: FSMContext):
    await state.update_data(card_id=message.text)
    await message.answer("‚ùì –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É CVV/CVC:")
    await states.PaymentDetails.CSV.set()


@dp.message_handler(state=states.PaymentDetails.CSV)
async def get_csv(message: types.Message, state: FSMContext):
    await state.update_data(CSV=message.text)
    await message.answer("‚ùì –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã:")
    await states.PaymentDetails.expire_date.set()


# --------------------------------------------------------------------------------------------------------- change team
# @dp.message_handler()
@dp.callback_query_handler(lambda c: c.data.startswith('change_team'))
async def change_team(callback: types.CallbackQuery, state: FSMContext):
    base = database.Model()
    keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    ras_keys = ["id", "date", "weekday", "address", "time", "max"]
    data = base.get(user_id=callback.from_user.id)
    if data is None:
        data = 0
    if data > 0:
        database.Model(user_id=int(callback.from_user.id), chance=int(data) + 1).update()
    match_id = (await state.get_data()).get("match_id")
    for index, some_data in enumerate(
            read_sheet_values(
                table_name="–ú–∞—Ç—á–∏!A:J",
                keys=keys
            )
    ):
        if some_data.get("user_id") == str(callback.from_user.id) and some_data.get("match_id") == str(match_id):
            delete("–ú–∞—Ç—á–∏", row_number=index + 2)

    data_values = read_sheet_values(table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=ras_keys)
    b_list = []
    dd = "\n\n"
    for index, text in enumerate(normalize_data(data_values)):
        b_list.append(
            buttons.InlineKeyboardButton(
                text=f"{index + 1}",
                callback_data=f"Example:{data_values[index]['id']}"
            )
        )
        get_discount()
        dd += f"‚úÖ {index + 1}.  " + text + "\n\n"
    b = buttons.InlineKeyboardMarkup().add(*b_list)
    await bot.send_message(
        callback.from_user.id,
        text="‚ÑπÔ∏è –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è "
             "—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç–∞–∫–æ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–æ–µ." + dd,
        reply_markup=b
    )


def get_discount():
    keys = ["regular_user", "new_user", "triple_games"]
    discounts = read_sheet_values(table_name="–¶–µ–Ω—ã", keys=keys)
    return discounts


# -------------------------------------------------------------------------------------------------------
@dp.message_handler(state=states.PaymentDetails.expire_date)
async def get_expiry(message: types.Message, state: FSMContext):
    await state.update_data(expire_date=message.text)
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    state_data = await state.get_data()
    regular_user = get_data_from_id(
        table_name="–ú–∞—Ç—á–∏!A:G",
        id=str(message.from_user.id),
        keys=match_keys,
        key="user_id"
    )

    def is_regular():
        if not regular_user:
            return False
        for k in regular_user:
            if subtract_from_current_date(k.get("date")) > 15:
                return False
        return True

    money_to_pay = 0
    if int(state_data.get("amount_of_game")) == 1:
        if is_regular():
            money_to_pay = int(get_discount()[0].get("regular_user"))
        else:
            money_to_pay = int(get_discount()[0].get("new_user"))
    elif int(state_data.get("amount_of_game")) == 3:
        if is_regular():
            money_to_pay = int(get_discount()[0].get("regular_user")) * 3
        else:
            money_to_pay = int(get_discount()[0].get("new_user")) * 3
    # Here, you should implement the payment processing using the card details stored in the state.
    # And if the payment is successful, store the 3 bounces in the database.
    user = get_data_from_id(
        id=str(message.from_user.id),
        table_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:G",
        keys=["date", "user_id", "fullname", "username", "phone", "region"],
        key="user_id"
    )[0]
    del user["region"], user["date"]
    matches = read_sheet_values(
        table_name="–ú–∞—Ç—á–∏!A:G",
        keys=match_keys,
    )
    date_keys = ["match_id", "data", "address", "date", "time", "max"]
    dates = get_data_from_id(
        table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G",
        id=str(state_data.get("match_id")),
        keys=date_keys,
        key="match_id"
    )[0]
    user = get_data_from_id(
        id=str(message.from_user.id),
        table_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:G",
        keys=["date", "user_id", "fullname", "username", "phone", "region"],
        key="user_id"
    )[0]
    del user["region"], user["date"]
    rem = list(user.values())
    final_data = list([dates.get("data"), dates.get("time"), dates.get("match_id")]) + rem + ["+"]

    def user_exists():
        for j in matches:
            if j.get("user_id") == str(message.from_user.id) and j.get("match_id") == str(state_data.get("match_id")):
                return True

    if user_exists():
        for index, i in enumerate(matches):
            if str(i.get("match_id")) == str(state_data.get("match_id")) and str(i.get("user_id")) == str(
                    message.from_user.id):
                update_registration(range_name="–ú–∞—Ç—á–∏", sign="+", row_index=index + 2)
    else:
        write_registration("–ú–∞—Ç—á–∏!A:G", list_of_values=final_data)

    await message.answer(str(money_to_pay))
    if database.Model().get_user(int(message.from_user.id)) is None:
        data = database.Model(
            user_id=int(message.from_user.id),
            chance=int(state_data.get("amount_of_game")) - 1
        )
        data.save()
    else:
        data = database.Model(
            user_id=int(message.from_user.id),
            chance=int(state_data.get("amount_of_game")) - 1
        )
        data.update()
    await message.answer("‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ")
    await message.answer(get_final_body_content(state_data.get("match_id")), reply_markup=buttons.change_team1)
    await state.finish()
    await state.update_data(match_id=state_data.get("match_id"))


@dp.message_handler(state=states.PaymentAmounts.amount_of_game)
@dp.callback_query_handler(lambda c: c.data.startswith('per'))
async def per_game(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(amount_of_game=1)
    await bot.send_message(
        callback.from_user.id,
        text="‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:"
    )
    await states.PaymentDetails.card_id.set()


@dp.message_handler(state=states.PaymentAmounts.amount_of_game)
@dp.callback_query_handler(lambda c: c.data.startswith('three'))
async def three_games(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(amount_of_game=3)
    await bot.send_message(
        callback.from_user.id,
        text="‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:"
    )
    await states.PaymentDetails.card_id.set()


@dp.message_handler(Command("start"))
async def start_command(message: types.Message):
    print(message.chat.id)
    user_id = read_sheet_values(table_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!B:B", keys=["id"])
    if is_registered(user_id, tg_id=message.from_user.id):
        await message.answer(
            f"üëãüëãüëã \n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.username}! –†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É "
            f"–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö.",
            reply_markup=buttons.two_buttons
        )
    else:
        await message.answer("üëãüëãüëã \n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–ø—Ä–∏–º–µ—Ä: –û—Ä–¥–∞–±–∞–µ–≤ –ö—É—Ä–∞–ª–±–µ–∫)")
        await states.UserDetails.full_name.set()


@dp.message_handler(state=states.UserDetails.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
    else:
        full_name = message.text
        await state.update_data(full_name=full_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7721234567")
        await states.UserDetails.phone_number.set()


@dp.message_handler(state=states.UserDetails.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
    else:
        phone_number = message.text
        if len(phone_number) < 10:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        else:
            await state.update_data(phone_number=phone_number)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ (–ø—Ä–∏–º–µ—Ä: –ê—Å—Ç–∞–Ω–∞)")
            await states.UserDetails.region.set()


# ------------------------------------------------------------------------------------------- Add user to registration
@dp.message_handler(state=states.UserDetails.region)
async def process_region(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
    else:
        region = message.text
        await state.update_data(region=region)
        user_data = await state.get_data()
        full_name = user_data.get("full_name")
        phone_number = user_data.get("phone_number")
        region = user_data.get("region")
        username = message.from_user.username
        user_id = message.from_user.id
        if "+" not in phone_number:
            phone_number = "+" + phone_number
        date = datetime.now(pytz.timezone("Asia/Almaty")).strftime("%d.%m.%Y")
        ls = [date, user_id, full_name, f"https://t.me/{username}", phone_number, region]
        write_registration("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:E", ls)
        await message.answer(
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ ‚Äú–ì–∞–∑–æ–Ω‚Äù! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É "
                 "–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö.",
            reply_markup=buttons.two_buttons
        )

        await state.finish()


# ------------------------------------------------------------------------------------------------ Normalize text
def get_final_body_content(key_id):
    keys = ["id", "date", "weekday", "address", "time"]
    data1 = get_data_from_id(id=str(key_id), table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=keys, key="id")
    date_address = normalize_data(data1)[0] + "\n\n"

    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    data2 = get_data_from_id(id=str(key_id), table_name="–ú–∞—Ç—á–∏!A1:I", keys=match_keys, key="match_id")

    payed_users = ""
    for index, user in enumerate(data2, start=1):
        if user.get("pay") == "+":
            if unix(user.get("date"), user.get("time")) < 0:
                payed_users += f"{index}. {user.get('fullname')}\n"

    reserve_users = '\n'.join(
        [f"{index}. {user.get('fullname')}" for index, user in enumerate(data2, start=1) if
         user.get("pay") != "+"])
    payload = f"–ö–æ–º–∞–Ω–¥–∞:\n{payed_users}\n\n–†–µ–∑–µ—Ä–≤:\n{reserve_users}"
    return date_address + payload


# ------------------------------------------------------------------------------------------------ prosmotret button
@dp.callback_query_handler(lambda c: c.data.startswith('Example:'))
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    data_parts = callback_query.data.split(':')
    key_id = data_parts[-1]
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]

    def is_regular_user():
        match = get_data_from_id(
            table_name="–ú–∞—Ç—á–∏!A:I",
            id=str(callback_query.from_user.id),
            keys=match_keys,
            key="user_id"
        )
        return len(match) > 0

    def is_joined_before():
        match = get_data_from_id(
            id=str(callback_query.from_user.id),
            table_name="–ú–∞—Ç—á–∏!A:I",
            keys=match_keys,
            key="user_id"
        )
        if not match:
            return False
        for i in match:
            if i.get("match_id") == key_id:
                return True
        return False

    await state.update_data(match_id=int(key_id))

    if is_regular_user():
        base = database.Model()
        data = base.get(user_id=int(callback_query.from_user.id))
        is_payed = not ((data is None) or (int(data) == 0))
        if not is_joined_before():
            if is_payed:
                await bot.send_message(
                    callback_query.from_user.id,
                    get_final_body_content(key_id),
                    reply_markup=buttons.payed_button
                )
            else:
                await bot.send_message(
                    callback_query.from_user.id,
                    get_final_body_content(key_id),
                    reply_markup=buttons.register_buttons
                )
        else:
            await bot.send_message(
                callback_query.from_user.id,
                get_final_body_content(key_id),
                reply_markup=buttons.change_team(key_id)
            )
    else:
        await bot.send_message(
            callback_query.from_user.id, mess, parse_mode="HTML", reply_markup=buttons.btn
        )


@dp.callback_query_handler(lambda c: c.data.startswith("rule"))
async def rules(callback_query: types.CallbackQuery, state: FSMContext):
    base = database.Model()
    key = await state.get_data()
    key_id = key.get("match_id")
    data = base.get(user_id=int(callback_query.from_user.id))
    is_payed = not ((data is None) or (int(data) == 0))
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]

    def is_joined_before():
        match = get_data_from_id(
            id=str(callback_query.from_user.id),
            table_name="–ú–∞—Ç—á–∏!A:I",
            keys=match_keys,
            key="user_id"
        )
        if not match:
            return False
        for i in match:
            if i.get("match_id") == key_id:
                return True
        return False

    if is_joined_before():
        if is_payed:
            await bot.send_message(
                callback_query.from_user.id,
                get_final_body_content(key_id),
                reply_markup=buttons.payed_button
            )
        else:
            await bot.send_message(
                callback_query.from_user.id,
                get_final_body_content(key_id),
                reply_markup=buttons.register_buttons
            )
    else:
        await bot.send_message(
            callback_query.from_user.id,
            get_final_body_content(key_id),
            reply_markup=buttons.change_team(key_id)
        )


# ------------------------------------------------------------------------------------------------ go back button
@dp.callback_query_handler(lambda c: c.data.startswith('go_back'))
async def go_back_button(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    ras_keys = ["id", "date", "weekday", "address", "time", "max"]
    data_values = read_sheet_values(table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=ras_keys)
    b_list = []
    dd = "\n\n"
    for index, text in enumerate(normalize_data(data_values)):
        b_list.append(
            buttons.InlineKeyboardButton(
                text=f"{index + 1}",
                callback_data=f"Example:{data_values[index]['id']}"
            )
        )
        dd += f"‚úÖ {index + 1}.  " + text + "\n\n"
    b = buttons.InlineKeyboardMarkup().add(*b_list)
    await bot.send_message(
        callback_query.from_user.id,
        text="‚ÑπÔ∏è –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è "
             "—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç–∞–∫–æ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–æ–µ." + dd,
        reply_markup=b
    )


# ------------------------------------------------------------------------------------------------ keyboard buttons
@dp.message_handler()
async def basic_message(message: types.Message):
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    keys = ["id", "date", "weekday", "address", "time", "max"]
    delete_expired(table="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=keys)
    if message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É":

        data_values = read_sheet_values(table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=keys)
        b_list = []
        dd = "\n\n"
        for index, text in enumerate(normalize_data(data_values)):
            b_list.append(
                buttons.InlineKeyboardButton(
                    text=f"{index + 1}",
                    callback_data=f"Example:{data_values[index]['id']}"
                )
            )
            dd += f"‚úÖ {index + 1}.  " + text + "\n\n"
        b = buttons.InlineKeyboardMarkup().add(*b_list)
        await message.answer(
            text="‚ÑπÔ∏è –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è "
                 "—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç–∞–∫–æ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–æ–µ." + dd,
            reply_markup=b
        )
    elif message.text == "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞":
        team_user = get_data_from_id(
            id=str(message.from_user.id),
            table_name="–ú–∞—Ç—á–∏!A:I",
            keys=match_keys,
            key="user_id"
        )
        match_id_list = []
        for i in team_user:
            match_id_list.append(i.get("match_id"))

        if not match_id_list:
            await message.answer("‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –¥–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –æ–¥–Ω—É")
        for per_id in match_id_list:
            await message.answer(get_final_body_content(per_id), reply_markup=buttons.change_team(per_id))


# ------------------------------------------------------------------------------------------------ cancel button
@dp.callback_query_handler(lambda c: c.data.startswith('absence:'))
async def delete_absent_user(callback: types.CallbackQuery):
    ras_keys = ["id", "date", "weekday", "address", "time", "max"]
    keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    match_id = callback.data.split(":")[-1]
    user = read_sheet_values(table_name="–ú–∞—Ç—á–∏!A1:I", keys=keys)
    for index, i in enumerate(user):
        if i.get("user_id") == str(callback.from_user.id) and i.get("match_id") == str(match_id):
            delete(sheet_name="–ú–∞—Ç—á–∏", row_number=index + 2)
    await bot.send_message(callback.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", )
    data_values = read_sheet_values(table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=ras_keys)
    b_list = []

    dd = "\n\n"
    for index, text in enumerate(normalize_data(data_values)):
        b_list.append(
            buttons.InlineKeyboardButton(
                text=f"{index + 1}",
                callback_data=f"Example:{data_values[index]['id']}"
            )
        )
        dd += f"‚úÖ {index + 1}.  " + text + "\n\n"
    b = buttons.InlineKeyboardMarkup().add(*b_list)
    await bot.send_message(
        callback.from_user.id,
        text="‚ÑπÔ∏è –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è "
             "—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç–∞–∫–æ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–æ–µ." + dd,
        reply_markup=b
    )


# ------------------------------------------------------------------------------------------------ Play button

@dp.callback_query_handler(lambda c: c.data == 'play')
async def play(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    chance = database.Model().get(user_id=int(callback.from_user.id))
    database.Model(chance=int(chance) - 1, user_id=int(callback.from_user.id)).update()
    state_data = await state.get_data()
    # Here, you should implement the payment processing using the card details stored in the state.
    # And if the payment is successful, store the 3 bounces in the database.
    user = get_data_from_id(
        id=str(callback.from_user.id),
        table_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:I",
        keys=["date", "user_id", "fullname", "username", "phone", "region"],
        key="user_id"
    )[0]
    del user["region"], user["date"]
    date_keys = ["match_id", "data", "address", "date", "time", "max"]
    dates = get_data_from_id(
        table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G",
        id=str(state_data.get("match_id")),
        keys=date_keys,
        key="match_id"
    )[0]
    rem = list(user.values())
    final_data = list([dates.get("data"), dates.get("time"), dates.get("match_id")]) + rem + ["+"]
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone"]
    match = get_data_from_id(
        id=str(callback.from_user.id),
        keys=match_keys,
        table_name="–ú–∞—Ç—á–∏!A:I",
        key="user_id"
    )

    def is_user_in():
        for m in match:
            if str(m.get("match_id")) == str(state_data.get("match_id")):
                return True
        return False

    if not is_user_in():
        write_registration(range_name="–ú–∞—Ç—á–∏", list_of_values=final_data)
        await bot.send_message(callback.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!")
    else:
        await bot.send_message(
            callback.from_user.id,
            text="–í—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!"
        )
        ras_keys = ["id", "date", "weekday", "address", "time", "max"]
        data_values = read_sheet_values(table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G", keys=ras_keys)
        b_list = []

        dd = "\n\n"
        for index, text in enumerate(normalize_data(data_values)):
            b_list.append(
                buttons.InlineKeyboardButton(
                    text=f"{index + 1}",
                    callback_data=f"Example:{data_values[index]['id']}"
                )
            )
            dd += f"‚úÖ {index + 1}.  " + text + "\n\n"
        b = buttons.InlineKeyboardMarkup().add(*b_list)
        await bot.send_message(
            callback.from_user.id,
            text="‚ÑπÔ∏è –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è "
                 "—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ç–∞–∫–æ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–æ–µ." + dd,
            reply_markup=b
        )


# ------------------------------------------------------------------------------------------------ Xochu igrat button
@dp.callback_query_handler(lambda c: c.data == 'play_button')
async def message1(callback: types.CallbackQuery, state: FSMContext):
    match_keys = ["date", "time", "match_id", "user_id", "fullname", "username", "phone", "pay"]
    match_state = await state.get_data()
    match_id = match_state.get("match_id")
    matches = get_data_from_id(
        id=str(match_id),
        table_name="–ú–∞—Ç—á–∏!A:G",
        keys=match_keys,
        key="match_id"
    )

    try:
        date_keys = ["match_id", "data", "address", "date", "time", "max"]
        dates = get_data_from_id(
            table_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A1:G",
            id=str(match_id),
            keys=date_keys,
            key="match_id"
        )[0]
        user = get_data_from_id(
            id=str(callback.from_user.id),
            table_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:G",
            keys=["date", "user_id", "fullname", "username", "phone", "region"],
            key="user_id"
        )[0]
        del user["region"], user["date"]
        rem = list(user.values())
        final_data = list([dates.get("data"), dates.get("time"), dates.get("match_id")]) + rem

        def is_joined():
            for i in matches:
                if i.get("user_id") == str(callback.from_user.id):
                    return True

            return False

        if not is_joined():
            if int(dates.get("max")) > len(matches):
                write_registration(
                    range_name="–ú–∞—Ç—á–∏!A:G",
                    list_of_values=final_data
                )
                await bot.send_chat_action(callback.from_user.id, "typing")
                await asyncio.sleep(2)
                await bot.send_message(chat_id=callback.from_user.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É!")
            else:
                await bot.send_message(chat_id=callback.from_user.id, text="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª–Ω–æ–µ")
        else:
            await bot.send_message(chat_id=callback.from_user.id, text="–í—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!")
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=get_final_body_content(match_id),
            reply_markup=buttons.change_team(match_id)
        )
    except IndexError as error:
        await bot.send_chat_action(callback.from_user.id, "typing")
        await asyncio.sleep(2)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=f"Error Body: {str(error)}"
        )

    await bot.delete_message(callback.from_user.id, callback.message.message_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
